{
  "swagger": "2.0",
  "info": {
    "title": "Gandalf API",
    "description": "`Gandalf` is a **Open-Source** Decision Engine for Big-Data. \n\nYou can find source code on our [GitHub account](https://github.com/Nebo15/gandalf.api/). Itâ€™s build on top of PHP Lumen framework and MongoDB.",
    "version": "1.0.0"
  },
  "host": "gandalf-api.nebo15.com",
  "schemes": [
    "http"
  ],
  "basePath": "/api/v1",
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic",
      "description": "HTTP Basic Authentication."
    }
  },
  "paths": {
    "/admin/tables": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "summary": "Tables List",
        "description": "Get list of Tables",
        "tags": [
          "Admin",
          "Tables"
        ],
        "parameters": [
          {
            "name": "size",
            "in": "request",
            "description": "Amount of Tables on page",
            "required": false
          },
          {
            "name": "page",
            "in": "request",
            "description": "Page for pagination",
            "required": false
          },
          {
            "name": "title",
            "in": "request",
            "description": "Filter by Table.title",
            "required": false
          },
          {
            "name": "description",
            "in": "request",
            "description": "Filter by Table.description",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Tables",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "description": "Response data object",
                  "items": {
                    "$ref": "#/definitions/TableList"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging",
                  "description": "Paging object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "summary": "Table Create",
        "description": "###Create a new Table.\nAvailable rules are: \n* `$is_set` - field key exists in request and its value can be any\n* `$is_null` - **(null)** value must be NULL\n* `$eq` - **(string, numeric, boolean)** value must be EQUAL to the condition value\n* `$ne` - **(string, numeric, boolean)** value must be NOT EQUAL to the condition value\n* `$gt` - **(numeric)** value must be GREATER THAN condition value\n* `$gte` - **(numeric)** value must be GREATER THAN OR EQUAL to condition value\n* `$lt` - **(numeric)** value must be LESS THAN to condition value\n* `$lte` - **(numeric)** value must be LESS THAN OR EQUAL to condition value\n* `$between` - **(numeric)** value must be in range of condition value. Condition value must be separated by semicolon: *12,3;30* \n* `$in` - **(string, numeric)** value must be one of the following in condition value. Condition value must be separated by comma: *10.8,'hello world'*\n* `$nin` - **(string, numeric)** value must NOT be one of the following in condition value. Condition value must be separated by comma: *10.8,'hello world'*\n",
        "tags": [
          "Admin",
          "Tables"
        ],
        "parameters": [
          {
            "name": "table",
            "in": "body",
            "description": "Table object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "_id",
                "title",
                "description",
                "matching_type",
                "default_decision",
                "default_title",
                "default_description",
                "rules",
                "fields"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of Table.",
                  "example": "Some title"
                },
                "description": {
                  "type": "string",
                  "description": "Description of Table.",
                  "example": "Some description"
                },
                "matching_type": {
                  "type": "string",
                  "description": "Matching type for Table.",
                  "example": "first",
                  "enum": [
                    "first",
                    "all"
                  ]
                },
                "default_decision": {
                  "type": "string",
                  "description": "If there are no rows with all validations passed, this decision will be set for Decision.",
                  "example": "Decline"
                },
                "default_title": {
                  "type": "string",
                  "description": "If there are no rows with all validations passed, this title will be set for Decision.",
                  "example": "Default title"
                },
                "default_description": {
                  "type": "string",
                  "description": "If there are no rows with all validations passed, this description will be set for Decision.",
                  "example": "Default description"
                },
                "fields": {
                  "type": "array",
                  "description": "Array of Field objects.",
                  "items": {
                    "$ref": "#/definitions/Field"
                  }
                },
                "rules": {
                  "type": "array",
                  "description": "Array of Rule objects.",
                  "items": {
                    "$ref": "#/definitions/Rule"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created Table",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Table"
              }
            }
          }
        }
      }
    },
    "/admin/tables/{id}": {
      "get": {
        "summary": "Table Read",
        "description": "Get Table by id",
        "tags": [
          "Admin",
          "Tables"
        ],
        "responses": {
          "200": {
            "description": "Table object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Table",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Table Update",
        "description": "Update Table by id",
        "tags": [
          "Admin",
          "Tables"
        ],
        "parameters": [
          {
            "name": "table",
            "in": "body",
            "description": "Table object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "_id",
                "title",
                "description",
                "matching_type",
                "default_decision",
                "default_title",
                "default_description",
                "rules",
                "fields"
              ],
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Title of Table.",
                  "example": "Some title"
                },
                "description": {
                  "type": "string",
                  "description": "Description of Table.",
                  "example": "Some description"
                },
                "matching_type": {
                  "type": "string",
                  "description": "Matching type for Table.",
                  "example": "first",
                  "enum": [
                    "first",
                    "all"
                  ]
                },
                "default_decision": {
                  "type": "string",
                  "description": "If there are no rows with all validations passed, this decision will be set for Decision.",
                  "example": "Decline"
                },
                "default_title": {
                  "type": "string",
                  "description": "If there are no rows with all validations passed, this title will be set for Decision.",
                  "example": "Default title"
                },
                "default_description": {
                  "type": "string",
                  "description": "If there are no rows with all validations passed, this description will be set for Decision.",
                  "example": "Default description"
                },
                "fields": {
                  "type": "array",
                  "description": "Array of Field objects.",
                  "items": {
                    "$ref": "#/definitions/Field"
                  }
                },
                "rules": {
                  "type": "array",
                  "description": "Array of Rule objects.",
                  "items": {
                    "$ref": "#/definitions/Rule"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Table object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Table",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Table Delete",
        "description": "Delete Table by id",
        "tags": [
          "Admin",
          "Tables"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "required": [
                "meta"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/admin/tables/{id}/copy": {
      "post": {
        "summary": "Table Copy",
        "description": "Create new Table from existing Table by id",
        "tags": [
          "Admin",
          "Tables"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "required": [
                "meta"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Table",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    },
    "/admin/tables/{id}/analytics": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "summary": "Table Analytics",
        "description": "Get Table analytics by all made Decisions",
        "tags": [
          "Admin",
          "Tables",
          "Analytics"
        ],
        "responses": {
          "200": {
            "description": "Table object with matched probabilities and requests amount for each condition",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/TableWithAnalytics",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/admin/group": {
      "get": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "summary": "Groups List",
        "description": "Get list of Groups",
        "tags": [
          "Admin",
          "Groups"
        ],
        "parameters": [
          {
            "name": "size",
            "in": "request",
            "description": "Amount of Groups on page",
            "required": false
          },
          {
            "name": "page",
            "in": "request",
            "description": "Page for pagination",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Groups",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "description": "Response data object",
                  "items": {
                    "$ref": "#/definitions/GroupList"
                  }
                },
                "paging": {
                  "$ref": "#/definitions/Paging",
                  "description": "Paging object"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "basicAuth": []
          }
        ],
        "summary": "Group Create",
        "description": "###Create a new Group.\n All tables must contain the same Field keys and matchyng_type must be defined as 'first'. When Field keys of Table which belongs to some Group will be updated, other Field keys of Tables in Group will be also updated to make them the same for the entire group. If a new Field key is added to the table, for each Table in the Group will be added a new condition `$is_set` for all Rules",
        "tags": [
          "Admin",
          "Groups"
        ],
        "parameters": [
          {
            "name": "table",
            "in": "body",
            "description": "Group object",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "tables",
                "title",
                "description",
                "probability"
              ],
              "properties": {
                "tables": {
                  "type": "array",
                  "description": "Array of Short Table objects.",
                  "items": {
                    "type": "object",
                    "description": "Short Table object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "Table ID. MongoID",
                        "example": "56c31536a60ad644060041af"
                      }
                    }
                  }
                },
                "title": {
                  "type": "string",
                  "description": "Group.title value",
                  "example": "Some title"
                },
                "description": {
                  "type": "string",
                  "description": "Group.description value",
                  "example": "Some description"
                },
                "probability": {
                  "type": "string",
                  "description": "Group.probability value",
                  "example": "Some probability"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created Group",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          }
        }
      }
    },
    "/admin/groups/{id}": {
      "get": {
        "summary": "Group Read",
        "description": "Get Group by id",
        "tags": [
          "Admin",
          "Groups"
        ],
        "responses": {
          "200": {
            "description": "Group object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Group",
                  "description": "Response data object"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Group Update",
        "description": "Update Group by id",
        "tags": [
          "Admin",
          "Groups"
        ],
        "parameters": [
          {
            "name": "table",
            "in": "body",
            "description": "Group object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "tables": {
                  "type": "array",
                  "description": "Array of Short Table objects.",
                  "items": {
                    "type": "object",
                    "description": "Short Table object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "Table ID. MongoID",
                        "example": "56c31536a60ad644060041af"
                      }
                    }
                  }
                },
                "title": {
                  "type": "string",
                  "description": "Group.title value",
                  "example": "Some title"
                },
                "description": {
                  "type": "string",
                  "description": "Group.description value",
                  "example": "Some description"
                },
                "probability": {
                  "type": "string",
                  "description": "Group.probability value",
                  "example": "Some probability"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Group",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Group Delete",
        "description": "Delete Group by id",
        "tags": [
          "Admin",
          "Groups"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "required": [
                "meta"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                }
              }
            }
          }
        }
      }
    },
    "/admin/groups/{id}/copy": {
      "post": {
        "summary": "Group Copy",
        "description": "Create new Group from existing Group by id",
        "tags": [
          "Admin",
          "Groups"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "required": [
                "meta"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Group",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    },
    "/admin/decisions": {
      "get": {
        "summary": "Decisions List",
        "description": "Get list of Decision objects",
        "tags": [
          "Decision",
          "Admin"
        ],
        "responses": {
          "200": {
            "description": "Array of Decision objects",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "description": "Response data object",
                  "items": {
                    "$ref": "#/definitions/Decision"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/decisions/{id}": {
      "get": {
        "summary": "Decision Read",
        "description": "Get Decision by id",
        "tags": [
          "Decision",
          "Admin"
        ],
        "responses": {
          "200": {
            "description": "Decision object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Decision",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    },
    "/admin/decisions/{id}/meta": {
      "put": {
        "summary": "Decision Update Meta",
        "description": "###Set or update Decision Meta by id. \n\nMetadata field supports key-value pairs with the following limitations:\n* Up to 24 keys.\n* Up to 100 characters for the key (alphanumeric characters, hyphens and underscores).\n* Up to 500 characters for the value.\n* String, integer, decimals and boolean values only. All other types will be converted into string.",
        "tags": [
          "Decision",
          "Admin"
        ],
        "parameters": [
          {
            "name": "table",
            "in": "body",
            "description": "Any object. Up to 24 keys, up to 100 characters for the key, up to 500 characters for the value.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "meta"
              ],
              "properties": {
                "meta": {
                  "type": "object",
                  "description": "Meta Data object. ",
                  "properties": {
                    "customerKey": {
                      "type": "string",
                      "description": "Customer value",
                      "example": "Any string up to 500 symbols"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Decision object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/Decision",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    },
    "/admin/changelog/tables": {
      "get": {
        "summary": "Changelog Tables List",
        "description": "Get list of all Changelog Tables",
        "tags": [
          "Admin",
          "Tables",
          "Changelog"
        ],
        "responses": {
          "200": {
            "description": "Changelog objects",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "description": "Response data object",
                  "items": {
                    "$ref": "#/definitions/ChangelogTablesList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/changelog/tables/{id}": {
      "get": {
        "summary": "Changelog by Table",
        "description": "Get Changelog by specific Table",
        "tags": [
          "Admin",
          "Tables",
          "Changelog"
        ],
        "responses": {
          "200": {
            "description": "Changelog objects",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "array",
                  "description": "Response data object",
                  "items": {
                    "$ref": "#/definitions/ChangelogTablesList"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/changelog/table/{id}/diff": {
      "get": {
        "summary": "Changelog Tables Diff",
        "description": "View changes between two Tables.",
        "tags": [
          "Admin",
          "Tables",
          "Changelog"
        ],
        "parameters": [
          {
            "name": "compare_with",
            "in": "request",
            "description": "Changelog ID. View changes relative from current (if not passed `original` parameter) Table state to passed Table state",
            "required": true
          },
          {
            "name": "original",
            "in": "request",
            "description": "Changelog ID. Set Table state, that will be compared with `compare_with` Table state",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Changelog Table object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "object",
                  "description": "Response data object",
                  "properties": {
                    "original": {
                      "$ref": "#/definitions/ChangelogTablesDiff"
                    },
                    "compare_with": {
                      "$ref": "#/definitions/ChangelogTablesDiff"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/changelog/tables/{table_id}/rollback/{changelog_id}": {
      "post": {
        "summary": "Changelog Table Rollback",
        "description": "Rollback Table to some state that described in passed Changelog",
        "tags": [
          "Admin",
          "Tables",
          "Changelog"
        ],
        "responses": {
          "200": {
            "description": "Changelog Table object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "type": "object",
                  "description": "Response data object",
                  "properties": {
                    "reverted": {
                      "$ref": "#/definitions/Table"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tables/{id}/decisions": {
      "post": {
        "summary": "Decision Make",
        "description": "Making Decision from Table",
        "tags": [
          "Consumer"
        ],
        "responses": {
          "200": {
            "description": "Decision Consumer object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/ConsumerDecision",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{id}/decisions": {
      "post": {
        "summary": "Decision Group Make",
        "description": "Making Decision from Table",
        "tags": [
          "Consumer"
        ],
        "responses": {
          "200": {
            "description": "Decision Consumer object",
            "schema": {
              "type": "object",
              "required": [
                "meta",
                "data"
              ],
              "properties": {
                "meta": {
                  "$ref": "#/definitions/Meta",
                  "description": "Meta data"
                },
                "data": {
                  "$ref": "#/definitions/ConsumerDecision",
                  "description": "Response data object"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Meta": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "description": "HTTP response code",
          "example": 200
        }
      }
    },
    "Paging": {
      "type": "object",
      "required": [
        "size",
        "total",
        "current_page",
        "last_page"
      ],
      "properties": {
        "size": {
          "type": "integer",
          "description": "Items per page",
          "example": 20
        },
        "total": {
          "type": "integer",
          "description": "Total items in collection",
          "example": 20
        },
        "current_page": {
          "type": "integer",
          "description": "Current page",
          "example": 20
        },
        "last_page": {
          "type": "integer",
          "description": "Items per page",
          "example": 20
        }
      }
    },
    "GroupList": {
      "type": "object",
      "description": "",
      "required": [
        "_id",
        "title",
        "probability",
        "tables"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Group. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "tables": {
          "type": "array",
          "description": "Array of tables",
          "items": {
            "type": "object",
            "description": "Short Table object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Table ID. MongoID",
                "example": "56c31536a60ad644060041af"
              }
            }
          }
        },
        "title": {
          "type": "string",
          "description": "Title of Group",
          "example": "Some title"
        },
        "probability": {
          "type": "string",
          "description": "Probability type",
          "example": "random",
          "enum": [
            "random"
          ]
        }
      }
    },
    "Group": {
      "type": "object",
      "description": "",
      "required": [
        "_id",
        "tables",
        "title",
        "description",
        "probability"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Group. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "tables": {
          "type": "array",
          "description": "Array of tables",
          "items": {
            "type": "object",
            "description": "Short Table object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Table ID. MongoID",
                "example": "56c31536a60ad644060041af"
              }
            }
          }
        },
        "title": {
          "type": "string",
          "description": "Title of Group",
          "example": "Some title"
        },
        "description": {
          "type": "string",
          "description": "Description of Group",
          "example": "Some description"
        },
        "probability": {
          "type": "string",
          "description": "Probability type",
          "example": "random",
          "enum": [
            "random"
          ]
        }
      }
    },
    "TableList": {
      "type": "object",
      "description": "Short view of Table for list",
      "required": [
        "_id",
        "title",
        "description",
        "matching_type",
        "default_decision"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Title of Table.",
          "example": "Some title"
        },
        "description": {
          "type": "string",
          "description": "Description of Table.",
          "example": "Some description"
        },
        "matching_type": {
          "type": "string",
          "description": "Matching type for Table.",
          "example": "first",
          "enum": [
            "first",
            "all"
          ]
        },
        "default_decision": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this decision will be set for Decision.",
          "example": "Decline"
        }
      }
    },
    "Table": {
      "type": "object",
      "description": "It consist of columns that describes API request structure, rows that describe decision-making logic, and cells that represents a single validation rule.",
      "required": [
        "_id",
        "title",
        "description",
        "matching_type",
        "default_decision",
        "default_title",
        "default_description",
        "rules",
        "fields"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Title of Table.",
          "example": "Some title"
        },
        "description": {
          "type": "string",
          "description": "Description of Table.",
          "example": "Some description"
        },
        "matching_type": {
          "type": "string",
          "description": "Matching type for Table.",
          "example": "first",
          "enum": [
            "first",
            "all"
          ]
        },
        "default_decision": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this decision will be set for Decision.",
          "example": "Decline"
        },
        "default_title": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this title will be set for Decision.",
          "example": "Default title"
        },
        "default_description": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this description will be set for Decision.",
          "example": "Default description"
        },
        "fields": {
          "type": "array",
          "description": "Array of Field objects.",
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "rules": {
          "type": "array",
          "description": "Array of Rule objects.",
          "items": {
            "$ref": "#/definitions/Rule"
          }
        }
      }
    },
    "TableWithAnalytics": {
      "type": "object",
      "description": "It consist of columns that describes API request structure, rows that describe decision-making logic, and cells that represents a single validation rule.",
      "required": [
        "_id",
        "title",
        "description",
        "matching_type",
        "default_decision",
        "default_title",
        "default_description",
        "rules",
        "fields"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Title of Table.",
          "example": "Some title"
        },
        "description": {
          "type": "string",
          "description": "Description of Table.",
          "example": "Some description"
        },
        "matching_type": {
          "type": "string",
          "description": "Matching type for Table.",
          "example": "first",
          "enum": [
            "first",
            "all"
          ]
        },
        "default_decision": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this decision will be set for Decision.",
          "example": "Decline"
        },
        "default_title": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this title will be set for Decision.",
          "example": "Default title"
        },
        "default_description": {
          "type": "string",
          "description": "If there are no rows with all validations passed, this description will be set for Decision.",
          "example": "Default description"
        },
        "fields": {
          "type": "array",
          "description": "Array of Field objects.",
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "rules": {
          "type": "array",
          "description": "Array of Rule objects with analytics data.",
          "items": {
            "$ref": "#/definitions/RuleAnalytics"
          }
        }
      }
    },
    "ChangelogTablesList": {
      "type": "object",
      "description": "It consist of columns that describes API request structure, rows that describe decision-making logic, and cells that represents a single validation rule.",
      "required": [
        "_id",
        "author",
        "model",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "author": {
          "type": "string",
          "description": "Author of changes of the current model.",
          "example": "Admin"
        },
        "model": {
          "type": "object",
          "description": "Information about Table.",
          "required": [
            "_id",
            "table"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "Model ID",
              "example": "56f3e34b4db07f8226010d65"
            },
            "table": {
              "type": "string",
              "description": "Model table name",
              "example": "tables"
            }
          }
        },
        "created_at": {
          "type": "string",
          "description": "Created Datetime",
          "example": "2016-02-16 14:15:30"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated Datetime",
          "example": "2016-02-17 11:25:31"
        }
      }
    },
    "ChangelogTablesDiff": {
      "type": "object",
      "description": "It consist of columns that describes API request structure, rows that describe decision-making logic, and cells that represents a single validation rule.",
      "required": [
        "_id",
        "author",
        "model",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "author": {
          "type": "string",
          "description": "Author of changes of the current model.",
          "example": "Admin"
        },
        "model": {
          "type": "object",
          "description": "Information about Table.",
          "required": [
            "_id",
            "table"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "Model ID",
              "example": "56f3e34b4db07f8226010d65"
            },
            "table": {
              "type": "string",
              "description": "Model table name",
              "example": "tables"
            },
            "attributes": {
              "type": "object",
              "description": "All Table attributes, with Embed IDs",
              "$ref": "#/definitions/Table"
            }
          }
        },
        "created_at": {
          "type": "string",
          "description": "Created Datetime",
          "example": "2016-02-16 14:15:30"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated Datetime",
          "example": "2016-02-17 11:25:31"
        }
      }
    },
    "Field": {
      "type": "object",
      "required": [
        "key",
        "title",
        "source",
        "type",
        "preset"
      ],
      "properties": {
        "key": {
          "type": "string",
          "description": "API Field for request",
          "example": "salary"
        },
        "title": {
          "type": "string",
          "description": "Field title",
          "example": "Field title"
        },
        "source": {
          "type": "string",
          "description": "Source type.",
          "example": "request",
          "enum": [
            "request"
          ]
        },
        "type": {
          "type": "string",
          "description": "Available field data types",
          "example": "string",
          "enum": [
            "numeric",
            "boolean",
            "string"
          ]
        },
        "preset": {
          "description": "Preset object. You can modify field value for table rows by adding field preset.",
          "$ref": "#/definitions/Preset"
        }
      }
    },
    "Preset": {
      "type": "object",
      "required": [
        "condition",
        "value"
      ],
      "properties": {
        "condition": {
          "type": "string",
          "description": "Available rules",
          "example": "$gte",
          "enum": [
            "$is_set",
            "$is_null",
            "$eq",
            "$ne",
            "$gt",
            "$gte",
            "$between",
            "$lt",
            "$lte",
            "$in",
            "$nin"
          ]
        },
        "value": {
          "type": "string|numeric|boolean",
          "description": "Value type can be different depends on condition",
          "example": 1000
        }
      }
    },
    "Rule": {
      "type": "object",
      "discriminator": "than",
      "required": [
        "than",
        "title",
        "description",
        "conditions"
      ],
      "properties": {
        "than": {
          "type": "string",
          "description": "Decision, when this rule is matched",
          "example": "Approve"
        },
        "title": {
          "type": "string",
          "description": "Rule title.",
          "example": "Rule title."
        },
        "description": {
          "type": "string",
          "description": "Rule description.",
          "example": "Rule description."
        },
        "conditions": {
          "type": "array",
          "description": "Array of Condition objects",
          "items": {
            "$ref": "#/definitions/Condition"
          }
        }
      }
    },
    "Condition": {
      "type": "object",
      "required": [
        "field_key",
        "condition",
        "value"
      ],
      "properties": {
        "field_key": {
          "type": "string",
          "description": "Key for API field key.",
          "example": "salary"
        },
        "condition": {
          "type": "string",
          "description": "Condition",
          "example": "$eq",
          "enum": [
            "$is_set",
            "$is_null",
            "$eq",
            "$ne",
            "$gt",
            "$gte",
            "$between",
            "$lt",
            "$lte",
            "$in",
            "$nin"
          ]
        },
        "value": {
          "type": "string|numeric|boolean",
          "description": "Value type can be different depends on condition",
          "example": 1000
        }
      }
    },
    "RuleAnalytics": {
      "type": "object",
      "discriminator": "than",
      "required": [
        "than",
        "title",
        "description",
        "conditions"
      ],
      "properties": {
        "than": {
          "type": "string",
          "description": "Decision, when this rule is matched",
          "example": "Approve"
        },
        "title": {
          "type": "string",
          "description": "Rule title.",
          "example": "Rule title."
        },
        "description": {
          "type": "string",
          "description": "Rule description.",
          "example": "Rule description."
        },
        "conditions": {
          "type": "array",
          "description": "Array of Condition objects with analytics data",
          "items": {
            "$ref": "#/definitions/ConditionAnalytics"
          }
        }
      }
    },
    "ConditionAnalytics": {
      "type": "object",
      "required": [
        "field_key",
        "condition",
        "value",
        "probability",
        "requests"
      ],
      "properties": {
        "field_key": {
          "type": "string",
          "description": "Key for API field key.",
          "example": "salary"
        },
        "condition": {
          "type": "string",
          "description": "Condition",
          "example": "$lte",
          "enum": [
            "$is_set",
            "$is_null",
            "$eq",
            "$ne",
            "$gt",
            "$gte",
            "$between",
            "$lt",
            "$lte",
            "$in",
            "$nin"
          ]
        },
        "value": {
          "type": "string|numeric|boolean",
          "description": "Value type can be different depends on condition",
          "example": 1000
        },
        "probability": {
          "type": "numeric",
          "description": "Probability value between 0-1, where 1 is 100% matched result",
          "example": 0.67
        },
        "requests": {
          "type": "numeric",
          "description": "Requests amount for current condition.",
          "example": 213
        }
      }
    },
    "Decision": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Title of the matched rule or Table.default_title.",
          "example": "Some title"
        },
        "description": {
          "type": "string",
          "description": "Description of the matched rule or Table.default_description.",
          "example": "Some description"
        },
        "meta": {
          "type": "array",
          "description": "Array of customer meta data objects. ",
          "items": {
            "type": "object",
            "description": "Meta Data object. ",
            "properties": {
              "customerKey": {
                "type": "string",
                "description": "Customer value",
                "example": "Any string up to 500 symbols"
              }
            }
          },
          "example": {
            "customerKey": "Customer value"
          }
        },
        "request": {
          "type": "object",
          "description": "All passed parameters from request",
          "example": {
            "salary": 1000
          }
        },
        "table": {
          "type": "object",
          "description": "Short Table object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Table ID. MongoID",
              "example": "56c31536a60ad644060041af"
            },
            "title": {
              "type": "string",
              "description": "Matched Rule.title if no one rules is matched Table.default_title.",
              "example": "Table default_title"
            },
            "description": {
              "type": "string",
              "description": "Matched Rule.description or if no one rules is matched - Table.default_description.",
              "example": "Table default_description"
            },
            "matching_type": {
              "type": "string",
              "description": "Matched_type rule. The same as in Table.matching_type.",
              "example": "first"
            }
          }
        },
        "group": {
          "type": "object",
          "description": "Short Group object. May be null if decision was made not from Group",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Group ID. MongoID",
              "example": "56c31536a60ad644060041af"
            },
            "title": {
              "type": "string",
              "description": "Group title",
              "example": "Group.title value"
            },
            "description": {
              "type": "string",
              "description": "Group description.",
              "example": "Group.description value"
            }
          }
        },
        "final_decision": {
          "type": "string|integer",
          "description": "Depends of the Table.matching_type could be as highest row in a table with all validations passed or sum of scoring points",
          "example": "Approve"
        },
        "fields": {
          "type": "array",
          "description": "Array of Field objects.",
          "items": {
            "$ref": "#/definitions/Field"
          }
        },
        "rules": {
          "type": "array",
          "description": "Array of Rule objects.",
          "items": {
            "$ref": "#/definitions/DecisionRule"
          }
        },
        "created_at": {
          "type": "string",
          "description": "Created Datetime",
          "example": "2016-02-16 14:15:30"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated Datetime",
          "example": "2016-02-17 11:25:31"
        }
      }
    },
    "DecisionRule": {
      "type": "object",
      "discriminator": "than",
      "required": [
        "than",
        "title",
        "description",
        "conditions"
      ],
      "properties": {
        "than": {
          "type": "string",
          "description": "Decision, when this rule is matched",
          "example": "Approve"
        },
        "decision": {
          "type": "string|integer|null",
          "description": "Current decision for this rule. If not matched - null",
          "example": "Approve"
        },
        "title": {
          "type": "string",
          "description": "Rule title.",
          "example": "Rule title."
        },
        "description": {
          "type": "string",
          "description": "Rule description.",
          "example": "Rule description."
        },
        "conditions": {
          "type": "array",
          "description": "Array of Condition objects",
          "items": {
            "$ref": "#/definitions/DecisionCondition"
          }
        }
      }
    },
    "DecisionCondition": {
      "type": "object",
      "required": [
        "field_key",
        "condition",
        "value"
      ],
      "properties": {
        "field_key": {
          "type": "string",
          "description": "Key for API field key.",
          "example": "salary"
        },
        "condition": {
          "type": "string",
          "description": "Condition",
          "example": "$eq",
          "enum": [
            "$is_set",
            "$is_null",
            "$eq",
            "$ne",
            "$gt",
            "$gte",
            "$between",
            "$lt",
            "$lte",
            "$in",
            "$nin"
          ]
        },
        "value": {
          "type": "string|numeric|boolean",
          "description": "Value type can be different depends on condition",
          "example": 1000
        },
        "matched": {
          "type": "boolean",
          "description": "Is current condition matched",
          "example": true
        }
      }
    },
    "ConsumerDecision": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "description": "Unique identifier representing a specific Table. MongoID",
          "example": "56c31536a60ad644060041af"
        },
        "title": {
          "type": "string",
          "description": "Title of the matched rule or Table.default_title.",
          "example": "Some title"
        },
        "description": {
          "type": "string",
          "description": "Description of the matched rule or Table.default_description.",
          "example": "Some description"
        },
        "request": {
          "type": "object",
          "description": "All passed parameters from request",
          "example": {
            "salary": 1000
          }
        },
        "table": {
          "type": "object",
          "description": "Short Table object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "Table ID. MongoID",
              "example": "56c31536a60ad644060041af"
            },
            "title": {
              "type": "string",
              "description": "Matched Rule.title if no one rules is matched Table.default_title.",
              "example": "Table default_title"
            },
            "description": {
              "type": "string",
              "description": "Matched Rule.description or if no one rules is matched - Table.default_description.",
              "example": "Table default_description"
            },
            "matching_type": {
              "type": "string",
              "description": "Matched_type rule. The same as in Table.matching_type.",
              "example": "first"
            }
          }
        },
        "final_decision": {
          "type": "string|integer",
          "description": "Depends of the Table.matching_type could be as highest row in a table with all validations passed or sum of scoring points",
          "example": "Approve"
        },
        "rules": {
          "type": "array",
          "description": "Array of Rule objects.",
          "items": {
            "$ref": "#/definitions/DecisionRule"
          }
        },
        "created_at": {
          "type": "string",
          "description": "Created Datetime",
          "example": "2016-02-16 14:15:30"
        },
        "updated_at": {
          "type": "string",
          "description": "Updated Datetime",
          "example": "2016-02-17 11:25:31"
        }
      }
    }
  }
}